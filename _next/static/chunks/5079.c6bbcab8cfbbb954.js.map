{"version":3,"file":"static/chunks/5079.c6bbcab8cfbbb954.js","mappings":"8LAAIA,EAAsC,WAStC,OARAA,EAAWC,OAAOC,QAAU,SAASC,GACjC,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KACzDN,EAAEM,GAAKL,EAAEK,IAEjB,OAAON,GAEJH,EAASa,MAAMC,KAAMP,YAoEhC,EA/DkB,SAAUQ,GACxB,IAAIC,EAAUD,EAAGC,QACbC,EAAqB,SAAUC,GAC/B,IAAIH,EACAI,EAAIC,EAAIC,EAAIC,EAAIC,EAChBC,EAAWN,EAAGO,SAASC,cAC3B,GAAoB,IAAhBR,EAAGS,SACH,OAAOT,EAAGU,YAET,GAAoB,IAAhBV,EAAGS,SACR,OAAO,KAEN,GAAiB,OAAbH,EACL,MAAO,KAEX,IAAIC,EAAWP,EAAGO,SACdI,EAASX,EAETY,EAAW,IAAQC,MAAMC,KAAKH,EAAOI,YAAYC,IAAIjB,IACzD,GAAiB,SAAbO,EACA,OAAO,QAAI,WAAY,GAAIM,GAE/B,IAAIK,EAAiBnB,EAAQoB,MAAK,SAAU3B,GACxC,IAAIM,EACJ,MAAyB,cAAjBN,EAAE4B,aACoB,QAAxBtB,EAAKN,EAAE6B,mBAAgC,IAAPvB,OAAgB,EAASA,EAAGwB,WAAad,EAASe,iBAE5F,GAAIL,GAAgD,cAA9BA,EAAeE,WAA4B,CAC7D,IAAII,EAASvB,EASb,GARKuB,EAAOC,QAIRD,EAAOC,MAAQ,IAAK,SAAuC,GAE3DD,EAAOC,MAAMC,QAAUF,EAAOG,aAAa,UAEjB,SAA1BT,EAAeU,OAAmB,CAClC,IAAIC,IAAW/B,EAAK,IACboB,EAAeY,MAAqO,QAA5N1B,EAAkK,QAA5JD,EAA2G,QAArGD,EAAwB,OAAnBgB,QAA8C,IAAnBA,OAA4B,EAASA,EAAeG,mBAAgC,IAAPnB,OAAgB,EAASA,EAAG6B,eAA4B,IAAP5B,OAAgB,EAASA,EAAGR,KAAKO,EAAIsB,UAA4B,IAAPpB,GAAgBA,EAC/QN,GACJ,OAAOe,EAASI,KAAI,SAAUe,GAAS,OAAO,QAAI,OAAQH,EAASG,MAGnE,IAAIC,EAAoK,QAA5J3B,EAA2G,QAArGD,EAAwB,OAAnBa,QAA8C,IAAnBA,OAA4B,EAASA,EAAeG,mBAAgC,IAAPhB,OAAgB,EAASA,EAAG0B,eAA4B,IAAPzB,OAAgB,EAASA,EAAGX,KAAKU,EAAImB,GACjNU,EAAQnD,EAAS,CAAE+C,KAAMZ,EAAeY,MAASG,EAAO,CAAEA,KAAMA,GAAS,IAC7E,OAAO,QAAI,UAAWC,EAAOrB,GAGrC,OAAOA,GAEX,OAAO,SAAUsB,GACb,ICjEkBC,EDiEdC,GCjEcD,EDiEK,SAAWD,EAAa,WChE5C,IAAI,EAAAG,WAAYC,gBAAgBH,EAAM,cDiErCI,EAAWxC,EAAmBqC,EAAOI,iBAKzC,MAAO,CACHC,OAHQ5B,MAAM6B,QAAQH,GAAYA,EAAW,CAACA,IAGjCI,QAAO,SAAUvD,GAAK,IAAIS,EAAII,EAAI,OAAwF,QAAhFA,EAAwE,MAAhD,QAAjBJ,EAAKT,EAAEwD,YAAyB,IAAP/C,OAAgB,EAASA,EAAGgD,eAAmC,IAAP5C,GAAgBA","sources":["webpack://_N_E/../packages/plugins/content/slate/lib-es/htmlToSlate/HtmlToSlate.js","webpack://_N_E/../packages/plugins/content/slate/lib-es/htmlToSlate/parseHtml.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport flatten from 'lodash.flatten';\nimport { jsx } from 'slate-hyperscript';\nimport parseHtml from './parseHtml';\nvar HtmlToSlate = function (_a) {\n    var plugins = _a.plugins;\n    var deserializeElement = function (el) {\n        var _a;\n        var _b, _c, _d, _e, _f;\n        var nodename = el.nodeName.toUpperCase();\n        if (el.nodeType === 3) {\n            return el.textContent;\n        }\n        else if (el.nodeType !== 1) {\n            return null;\n        }\n        else if (nodename === 'BR') {\n            return '\\n';\n        }\n        var nodeName = el.nodeName;\n        var parent = el;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var children = flatten(Array.from(parent.childNodes).map(deserializeElement));\n        if (nodename === 'BODY') {\n            return jsx('fragment', {}, children);\n        }\n        var matchingPlugin = plugins.find(function (p) {\n            var _a;\n            return (p.pluginType === 'component' &&\n                ((_a = p.deserialize) === null || _a === void 0 ? void 0 : _a.tagName) === nodeName.toLowerCase());\n        });\n        if (matchingPlugin && matchingPlugin.pluginType === 'component') {\n            var elHtml = el;\n            if (!elHtml.style) {\n                // xmldom has no style attribute\n                // we monkey patch it in for easier style parsing\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                elHtml.style = new (require('cssstyle').CSSStyleDeclaration)();\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                elHtml.style.cssText = elHtml.getAttribute('style');\n            }\n            if (matchingPlugin.object === 'mark') {\n                var attrs_1 = (_a = {},\n                    _a[matchingPlugin.type] = (_d = (_c = (_b = matchingPlugin === null || matchingPlugin === void 0 ? void 0 : matchingPlugin.deserialize) === null || _b === void 0 ? void 0 : _b.getData) === null || _c === void 0 ? void 0 : _c.call(_b, elHtml)) !== null && _d !== void 0 ? _d : true,\n                    _a);\n                return children.map(function (child) { return jsx('text', attrs_1, child); });\n            }\n            else {\n                var data = (_f = (_e = matchingPlugin === null || matchingPlugin === void 0 ? void 0 : matchingPlugin.deserialize) === null || _e === void 0 ? void 0 : _e.getData) === null || _f === void 0 ? void 0 : _f.call(_e, elHtml);\n                var attrs = __assign({ type: matchingPlugin.type }, (data ? { data: data } : {}));\n                return jsx('element', attrs, children);\n            }\n        }\n        return children;\n    };\n    return function (htmlString) {\n        var parsed = parseHtml('<body>' + htmlString + '</body>');\n        var fragment = deserializeElement(parsed.documentElement\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        );\n        var nodes = Array.isArray(fragment) ? fragment : [fragment];\n        // filter empty nodes (that contain only text)\n        return {\n            slate: nodes.filter(function (n) { var _a, _b; return (_b = ((_a = n.text) === null || _a === void 0 ? void 0 : _a.trim()) !== '') !== null && _b !== void 0 ? _b : true; }),\n        };\n    };\n};\nexport default HtmlToSlate;\n//# sourceMappingURL=HtmlToSlate.js.map","import { DOMParser } from '@xmldom/xmldom';\nexport default (function (html) {\n    return new DOMParser().parseFromString(html, 'text/html');\n});\n//# sourceMappingURL=parseHtml.js.map"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","_a","plugins","deserializeElement","el","_b","_c","_d","_e","_f","nodename","nodeName","toUpperCase","nodeType","textContent","parent","children","Array","from","childNodes","map","matchingPlugin","find","pluginType","deserialize","tagName","toLowerCase","elHtml","style","cssText","getAttribute","object","attrs_1","type","getData","child","data","attrs","htmlString","html","parsed","DOMParser","parseFromString","fragment","documentElement","slate","isArray","filter","text","trim"],"sourceRoot":""}