{"version":3,"file":"static/chunks/4759.636d881f79c7e4c2.js","mappings":"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","sources":["webpack://_N_E/../node_modules/invariant/browser.js","webpack://_N_E/../node_modules/lodash/_baseForOwn.js","webpack://_N_E/../node_modules/lodash/mapValues.js","webpack://_N_E/../packages/react-admin/node_modules/uniforms/esm/context.js","webpack://_N_E/../packages/react-admin/node_modules/uniforms/esm/joinName.js","webpack://_N_E/../packages/react-admin/node_modules/uniforms/esm/useField.js","webpack://_N_E/../packages/react-admin/node_modules/uniforms/esm/useForm.js","webpack://_N_E/../packages/react-admin/lib-es/RaSelectReferenceInputField.js","webpack://_N_E/../packages/react-admin/node_modules/uniforms/esm/connectField.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var baseAssignValue = require('./_baseAssignValue'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nmodule.exports = mapValues;\n","import { createContext } from 'react';\nexport const context = createContext(null);\n","const escapeMatch = /[.[\\]]/;\nconst escapeRegex = /\"/g;\n/** @internal */\nfunction escape(string) {\n    return string === '' || escapeMatch.test(string)\n        ? `[\"${string.replace(escapeRegex, '\\\\\"')}\"]`\n        : string;\n}\n/** @internal */\nfunction escapeToJoin(string, index) {\n    const escaped = escape(string);\n    return escaped === string ? (index ? `.${string}` : string) : escaped;\n}\nconst unescapeMatch = /^\\[\"(.*)\"]$/;\nconst unescapeRegex = /\\\\\"/g;\n/** @internal */\nfunction unescape(string) {\n    const match = unescapeMatch.exec(string);\n    return match ? match[1].replace(unescapeRegex, '\"') : string;\n}\n// This regular expression splits the string into three parts:\n//   `prefix` is a dotted name, e.g., `object.nested.2.field` at the\n//            front (hence prefix). It covers most standard usecases.\n//   `subscript` is a `[\"...\"]` subscript after the prefix. The content\n//               within should be escaped by the user, e.g., `[\"\\\\\"\"]`.\n//   `rest` is anything following the subscript. The leading dot (`.`)\n//          is stripped (`.a` -> `a`) if there is one. It is empty if\n//          `subscript` is empty.\n//\n// All three parts can be empty!\nconst nameRegex = /^([^.[\\]]*(?:\\.[^.[\\]]+)*)(?:\\.?(\\[\"(?:(?:[^\"]|\\\\\")*?[^\\\\])?\"])\\.?(.*))?$/;\n// eslint-disable-next-line complexity -- The complexity of it _is_ high.\nfunction joinNameImpl(...parts) {\n    // If the first argument is `null`, then we return an escaped array of parts.\n    // Otherwise, an escaped string is returned. As we may modify `parts` later,\n    // this has to be checked now.\n    const returnAsParts = parts[0] === null;\n    // Result parts (not escaped).\n    const name = [];\n    // This cannot be transformed into a `.forEach` loop and the length of it\n    // can not be memoized, as we modify `parts` as we go for performance reasons.\n    for (let index = 0; index !== parts.length; ++index) {\n        const part = parts[index];\n        // All falsy values except `0` are ignored.\n        if (part || part === 0) {\n            if (typeof part === 'string') {\n                // Strings are matched against the regular expression that split it into\n                // three parts (all can be empty):\n                //   `prefix` is a dotted name, e.g., `object.nested.2.field` at the\n                //            front (hence prefix). It covers most standard usecases.\n                //   `subscript` is a `[\"...\"]` subscript after the prefix. The content\n                //               within should be escaped by the user, e.g., `[\"\\\\\"\"]`.\n                //   `rest` is anything following the subscript. The leading dot (`.`)\n                //          is stripped (`.a` -> `a`) if there is one. It is empty if\n                //          `subscript` is empty.\n                const match = nameRegex.exec(part);\n                if (match) {\n                    const [, prefix, subscript, rest] = match;\n                    if (prefix) {\n                        // We could always `.split` the `prefix`, but it results in a severe\n                        // performance hit.\n                        if (prefix.includes('.')) {\n                            name.push(...prefix.split('.'));\n                        }\n                        else {\n                            name.push(prefix);\n                        }\n                    }\n                    if (subscript) {\n                        // We could adjust the `nameRegex` to skip brackets and `unescape`\n                        // to skip this check, but then every other call (e.g., a one in the\n                        // bridge) would have to know that. The performance is not affected\n                        // much by it anyway.\n                        name.push(unescape(subscript));\n                        // The `rest` is inlined in place as it is a single string.\n                        if (rest) {\n                            parts[index--] = rest;\n                        }\n                    }\n                }\n                else {\n                    // If a string is not matching the pattern, we leave it as it is. We\n                    // may want to raise a warning here as it should not happen. Most\n                    // likely it is something that should have been escaped (e.g., `[`).\n                    name.push(part);\n                }\n            }\n            else if (Array.isArray(part)) {\n                // Arrays are flattened in place but only if needed, i.e., they are not\n                // empty. We calculate the length of the overlapping parts to reuse the\n                // `parts` array as much as possible:\n                // [[], ...]              -> [[], ...]       // No change.\n                // [['a'], ...]           -> ['a', ...]      // Inline in place.\n                // [['a', 'b'], ...]      -> ['a', 'b', ...] // Inline with extension.\n                // ['a', ['b'], ...]      -> ['a', 'b', ...] // Inline in place.\n                // ['a', ['b', 'c'], ...] -> ['b', 'c', ...] // Inline with overlap.\n                if (part.length) {\n                    const length = Math.min(index + 1, part.length);\n                    index -= length;\n                    parts.splice(index + 1, length, ...part);\n                }\n            }\n            else {\n                // Other values -- most likely numbers and `true` -- are stringified.\n                name.push('' + part);\n            }\n        }\n    }\n    // We cannot escape the parts earlier as `escapeToJoin` depends on the index.\n    return returnAsParts ? name.map(escape) : name.map(escapeToJoin).join('');\n}\nexport const joinName = Object.assign(joinNameImpl, { escape, unescape });\n","import get from 'lodash/get';\nimport mapValues from 'lodash/mapValues';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { joinName } from './joinName';\nimport { useForm } from './useForm';\nfunction propagate(prop, schema, state, fallback) {\n    const forcedFallbackInProp = prop === true || prop === undefined;\n    const forcedFallbackInSchema = schema === true || schema === undefined;\n    const schemaValue = forcedFallbackInSchema ? fallback : schema;\n    const value = prop === '' ||\n        prop === false ||\n        prop === null ||\n        (forcedFallbackInProp && (forcedFallbackInSchema || !state))\n        ? ''\n        : forcedFallbackInProp\n            ? schemaValue\n            : prop;\n    return [value, schemaValue];\n}\nexport function useField(fieldName, props, options) {\n    var _a;\n    const context = useForm();\n    const name = joinName((options === null || options === void 0 ? void 0 : options.absoluteName) ? '' : context.name, fieldName);\n    const field = context.schema.getField(name);\n    const usesInitialValue = (options === null || options === void 0 ? void 0 : options.initialValue) !== false;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const onChangeCalled = usesInitialValue ? useRef(false) : { current: false };\n    const state = mapValues(context.state, (prev, key) => {\n        const next = props[key];\n        return next !== null && next !== undefined ? !!next : prev;\n    });\n    const changed = !!get(context.changedMap, name);\n    const error = context.schema.getError(name, context.error);\n    const errorMessage = context.schema.getErrorMessage(name, context.error);\n    const fieldType = context.schema.getType(name);\n    const fields = context.schema.getSubfields(name);\n    const schemaProps = context.schema.getProps(name, Object.assign(Object.assign({}, state), props));\n    const [label, labelFallback] = propagate(props.label, schemaProps.label, state.label, '');\n    const [placeholder] = propagate(props.placeholder, schemaProps.placeholder, state.placeholder, label || labelFallback);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const id = useMemo(() => context.randomId(), []);\n    const onChange = useCallback((value, key = name) => {\n        onChangeCalled.current = true;\n        context.onChange(key, value);\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [context.onChange, name]);\n    const valueFromModel = get(context.model, name);\n    let initialValue;\n    let value = (_a = props.value) !== null && _a !== void 0 ? _a : valueFromModel;\n    if (usesInitialValue) {\n        if (!onChangeCalled.current) {\n            if (value === undefined) {\n                value = context.schema.getInitialValue(name, props);\n                initialValue = value;\n            }\n            else if (props.value !== undefined && props.value !== valueFromModel) {\n                initialValue = props.value;\n            }\n        }\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n            var _a;\n            const required = (_a = props.required) !== null && _a !== void 0 ? _a : schemaProps.required;\n            if (required && initialValue !== undefined) {\n                onChange(initialValue);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n    }\n    const fieldProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id }, state), { changed,\n        error,\n        errorMessage,\n        field,\n        fieldType,\n        fields,\n        onChange,\n        value }), schemaProps), props), { label,\n        name, \n        // TODO: Should we assert `typeof placeholder === 'string'`?\n        placeholder: placeholder });\n    return [fieldProps, context];\n}\n","import invariant from 'invariant';\nimport { useContext } from 'react';\nimport { context as contextReference } from './context';\nexport function useForm() {\n    const context = useContext(contextReference);\n    invariant(context !== null, 'useForm must be used within a form.');\n    return context;\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ReferenceInput, SelectInput } from 'react-admin';\nimport { connectField } from 'uniforms';\nimport React from 'react';\n/**\n * RaSelectReferenceInputField can be used in an autoform to\n */\nvar RaSelectReferenceInputField = connectField(function (_a) {\n    var _b = _a.allowEmpty, allowEmpty = _b === void 0 ? true : _b, _c = _a.value, value = _c === void 0 ? null : _c, onChange = _a.onChange, optionText = _a.optionText, optionValue = _a.optionValue, label = _a.label, props = __rest(_a, [\"allowEmpty\", \"value\", \"onChange\", \"optionText\", \"optionValue\", \"label\"]);\n    return (React.createElement(ReferenceInput, { label: label, reference: props.reference, perPage: props.perPage, allowEmpty: allowEmpty, meta: {}, input: {\n            value: value,\n            onChange: function (e) {\n                onChange(e.target.value);\n            },\n        }, source: null },\n        React.createElement(SelectInput, { optionText: optionText || 'id', emptyValue: null, optionValue: optionValue || 'id', options: { value: value } })));\n});\nexport default RaSelectReferenceInputField;\n//# sourceMappingURL=RaSelectReferenceInputField.js.map","import mapValues from 'lodash/mapValues';\nimport React from 'react';\nimport { context as contextReference } from './context';\nimport { useField } from './useField';\nfunction getNextContext(context, props, options) {\n    // Leaf components by definition do not affect the context. `AutoField` will\n    // skip most of them anyway, but if rendered directly we have to do it here.\n    // An example in the core theme are the `List*Field`s.\n    if ((options === null || options === void 0 ? void 0 : options.kind) === 'leaf') {\n        return context;\n    }\n    const changesName = props.name !== '';\n    const changesState = Object.keys(context.state).some(key => {\n        const next = props[key];\n        return next !== null && next !== undefined;\n    });\n    // There are no other ways of affecting the context.\n    if (!changesName && !changesState) {\n        return context;\n    }\n    const nextContext = Object.assign({}, context);\n    if (changesName) {\n        nextContext.name = nextContext.name.concat(props.name);\n    }\n    if (changesState) {\n        nextContext.state = mapValues(nextContext.state, (prev, key) => {\n            const next = props[key];\n            return next !== null && next !== undefined ? !!next : prev;\n        });\n    }\n    return nextContext;\n}\nexport function connectField(Component, options) {\n    function Field(props) {\n        const [fieldProps, context] = useField(props.name, props, options);\n        const nextContext = getNextContext(context, props, options);\n        const body = React.createElement(Component, Object.assign({}, props, fieldProps));\n        // If the context has not changed, then don't render the `Provider`. It's\n        // possible that it will change at some point, but it's extremely rare, as\n        // either `name` or one of the \"state props\" has to change.\n        if (context === nextContext) {\n            return body;\n        }\n        return React.createElement(contextReference.Provider, { children: body, value: nextContext });\n    }\n    Field.displayName = `${Component.displayName || Component.name}Field`;\n    return Object.assign(Field, { Component, options });\n}\n"],"names":["module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","baseFor","keys","object","iteratee","baseAssignValue","baseForOwn","baseIteratee","result","value","key","createContext","escapeMatch","escapeRegex","string","test","escapeToJoin","index","escaped","unescapeMatch","unescapeRegex","match","exec","nameRegex","joinName","Object","assign","parts","returnAsParts","length","part","prefix","subscript","rest","includes","push","split","Array","isArray","Math","min","splice","map","join","escape","propagate","prop","schema","state","fallback","forcedFallbackInProp","forcedFallbackInSchema","schemaValue","useField","fieldName","props","options","_a","context","useContext","useForm","absoluteName","field","getField","usesInitialValue","initialValue","onChangeCalled","useRef","current","prev","next","changed","changedMap","getError","errorMessage","getErrorMessage","fieldType","getType","fields","getSubfields","schemaProps","getProps","label","labelFallback","placeholder","id","useMemo","randomId","onChange","useCallback","valueFromModel","model","getInitialValue","useEffect","required","__rest","s","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","Component","Field","fieldProps","nextContext","kind","changesName","changesState","some","concat","getNextContext","body","children","displayName","connectField","_b","allowEmpty","_c","optionText","optionValue","ReferenceInput","reference","perPage","meta","input","target","source","SelectInput","emptyValue"],"sourceRoot":""}