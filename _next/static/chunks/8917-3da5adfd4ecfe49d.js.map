{"version":3,"file":"static/chunks/8917-3da5adfd4ecfe49d.js","mappings":"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","sources":["webpack://_N_E/../packages/editor/lib-es/core/selector/display/index.js","webpack://_N_E/../packages/editor/lib-es/core/components/hooks/displayMode.js","webpack://_N_E/../packages/editor/lib-es/core/utils/getDropLevels.js","webpack://_N_E/../packages/editor/lib-es/core/components/hooks/node.js","webpack://_N_E/../packages/editor/lib-es/core/components/hooks/nodeActions.js","webpack://_N_E/../packages/editor/lib-es/core/utils/ancestorTree.js","webpack://_N_E/<anon>"],"sourcesContent":["import { DISPLAY_MODE_EDIT, DISPLAY_MODE_LAYOUT, DISPLAY_MODE_PREVIEW, DISPLAY_MODE_INSERT, DISPLAY_MODE_RESIZING, } from '../../actions/display';\nexport var isPreviewMode = function (_a) {\n    var mode = _a.reactPage.display.mode;\n    return mode === DISPLAY_MODE_PREVIEW;\n};\nexport var isLayoutMode = function (_a) {\n    var mode = _a.reactPage.display.mode;\n    return mode === DISPLAY_MODE_LAYOUT;\n};\nexport var isEditMode = function (_a) {\n    var mode = _a.reactPage.display.mode;\n    return mode === DISPLAY_MODE_EDIT;\n};\nexport var isInsertMode = function (_a) {\n    var mode = _a.reactPage.display.mode;\n    return mode === DISPLAY_MODE_INSERT;\n};\nexport var isResizeMode = function (_a) {\n    var mode = _a.reactPage.display.mode;\n    return mode === DISPLAY_MODE_RESIZING;\n};\n//# sourceMappingURL=index.js.map","import { useCallback } from 'react';\nimport { DISPLAY_MODE_EDIT, DISPLAY_MODE_INSERT, DISPLAY_MODE_LAYOUT, DISPLAY_MODE_PREVIEW, DISPLAY_MODE_RESIZING, setMode, } from '../../actions/display';\nimport { useDispatch, useSelector } from '../../reduxConnect';\nimport { isEditMode, isInsertMode, isLayoutMode, isPreviewMode, isResizeMode, } from '../../selector/display';\n/**\n * @returns true whether the editor is in edit mode\n */\nexport var useIsEditMode = function () {\n    return useSelector(isEditMode);\n};\n/**\n * @returns true whether the editor is in insert mode\n */\nexport var useIsInsertMode = function () {\n    return useSelector(isInsertMode);\n};\n/**\n * @returns true whether the editor is in layout mode\n */\nexport var useIsLayoutMode = function () {\n    return useSelector(isLayoutMode);\n};\n/**\n * @returns true whether the editor is in preview mode mode\n */\nexport var useIsPreviewMode = function () {\n    return useSelector(isPreviewMode);\n};\n/**\n * @returns true whether the editor is in resize mode mode\n */\nexport var useIsResizeMode = function () {\n    return useSelector(isResizeMode);\n};\n/**\n * @returns the current display mode\n */\nexport var useDisplayMode = function () {\n    return useSelector(function (state) { return state.reactPage.display.mode; });\n};\n/**\n * experimental, used internaly for the add new button.\n * @returns a referenced nodeId for the current display mode.\n *\n *\n */\nexport var useDisplayModeReferenceNodeId = function () {\n    return useSelector(function (state) { var _a, _b; return (_b = (_a = state.reactPage) === null || _a === void 0 ? void 0 : _a.display) === null || _b === void 0 ? void 0 : _b.referenceNodeId; });\n};\n/**\n * @returns function to set the display mode\n */\nexport var useSetMode = function () {\n    var dispatch = useDispatch();\n    return useCallback(function (mode, referenceNodeId) {\n        dispatch(setMode(mode, referenceNodeId));\n    }, [dispatch]);\n};\n/**\n * @returns function to change to resize mode\n */\nexport var useSetResizeMode = function () {\n    var setMode = useSetMode();\n    return useCallback(function () { return setMode(DISPLAY_MODE_RESIZING); }, [setMode]);\n};\n/**\n * @returns function to change to edit mode mode\n */\nexport var useSetEditMode = function () {\n    var setMode = useSetMode();\n    return useCallback(function () { return setMode(DISPLAY_MODE_EDIT); }, [setMode]);\n};\n/**\n * @returns function to change to layout mode\n */\nexport var useSetLayoutMode = function () {\n    var setMode = useSetMode();\n    return useCallback(function () { return setMode(DISPLAY_MODE_LAYOUT); }, [setMode]);\n};\n/**\n * @returns function to change to insert mode\n */\nexport var useSetInsertMode = function () {\n    var setMode = useSetMode();\n    return useCallback(function () { return setMode(DISPLAY_MODE_INSERT); }, [setMode]);\n};\n/**\n * @returns function to change to preview mode\n */\nexport var useSetPreviewMode = function () {\n    var setMode = useSetMode();\n    return useCallback(function () { return setMode(DISPLAY_MODE_PREVIEW); }, [setMode]);\n};\n//# sourceMappingURL=displayMode.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { isRow } from '../types/node';\nvar getMyPositionInParent = function (node, parent) {\n    var _a;\n    var siblings = (_a = (isRow(parent) ? parent.cells : parent.rows)) !== null && _a !== void 0 ? _a : [];\n    var index = siblings.findIndex(function (c) { return c.id === node.id; });\n    return [index, siblings.length];\n};\nvar left = function (node, ancestors) {\n    var _a = __read(ancestors), parent = _a[0], greatParents = _a.slice(1);\n    if (!parent)\n        return 0;\n    if (isRow(node)) {\n        return left(parent, greatParents) + 1;\n    }\n    else {\n        var _b = __read(getMyPositionInParent(node, parent), 1), index = _b[0];\n        if (index === 0) {\n            return left(parent, greatParents) + 1;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nvar right = function (node, ancestors) {\n    var _a = __read(ancestors), parent = _a[0], greatParents = _a.slice(1);\n    if (!parent)\n        return 0;\n    if (isRow(node)) {\n        return right(parent, greatParents) + 1;\n    }\n    else {\n        var _b = __read(getMyPositionInParent(node, parent), 2), index = _b[0], numberOfSiblings = _b[1];\n        if (index === numberOfSiblings - 1) {\n            return right(parent, greatParents) + 1;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nvar above = function (node, ancestors) {\n    var _a = __read(ancestors), parent = _a[0], greatParents = _a.slice(1);\n    if (!parent)\n        return 0;\n    if (!isRow(node)) {\n        return above(parent, greatParents) + 1;\n    }\n    else {\n        var _b = __read(getMyPositionInParent(node, parent), 1), index = _b[0];\n        if (index === 0) {\n            return above(parent, greatParents) + 1;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nvar below = function (node, ancestors) {\n    var _a = __read(ancestors), parent = _a[0], greatParents = _a.slice(1);\n    if (!parent)\n        return 0;\n    if (!isRow(node)) {\n        return below(parent, greatParents) + 1;\n    }\n    else {\n        var _b = __read(getMyPositionInParent(node, parent), 2), index = _b[0], numberOfSiblings = _b[1];\n        if (index === numberOfSiblings - 1) {\n            return below(parent, greatParents) + 1;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nexport var getDropLevels = function (node, ancestors) { return ({\n    left: left(node, ancestors),\n    right: right(node, ancestors),\n    above: above(node, ancestors),\n    below: below(node, ancestors),\n}); };\n//# sourceMappingURL=getDropLevels.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { useSelector } from '../../reduxConnect';\nimport { findNodeInState } from '../../selector/editable';\nimport { isRow } from '../../types/node';\nimport deepEquals from '../../utils/deepEquals';\nimport { getAvailablePlugins } from '../../utils/getAvailablePlugins';\nimport { getCellData } from '../../utils/getCellData';\nimport { getCellInnerDivStylingProps } from '../../utils/getCellStylingProps';\nimport { getDropLevels } from '../../utils/getDropLevels';\nimport { useUpdateCellData } from './nodeActions';\nimport { useLang } from './options';\nimport { useRenderOption } from './renderOptions';\n/**\n * Use this function to get derived properties of a node. It prevents unnessesary rerenders when only the nessesary properties are returned by the selector\n *\n * you can also select props from the ancestors of the node. Be aware that the last ancestor is the root document id\n *\n * @param nodeId an id of a node (cell or row)\n * @param selector receives the node object or null (if no node with this id exists) and returns T\n * @returns the selection T\n */\nexport var useNodeProps = function (nodeId, selector) {\n    var node = useSelector(function (state) {\n        var result = nodeId ? findNodeInState(state, nodeId) : null;\n        if (!result) {\n            return selector(null, []);\n        }\n        return selector(result.node, result.ancestors);\n    }, deepEquals);\n    return node;\n};\n/**\n *\n * @param nodeId id of a node\n * @param selector receives the ancestors array and returns T\n * @returns T\n */\nexport var useNodeAncestorProps = function (nodeId, selector) {\n    return useNodeProps(nodeId, function (__, ancestors) { return selector(ancestors); });\n};\n/**\n * This is the same as @see useNodeProps, but only for cells. selector will receive null if the given nodeId is not a cell\n * @param nodeId an id of a cell\n * @param selector receives the cell or null (if no cell with this id exists) object and returns T\n * @returns the selection T\n */\nexport var useCellProps = function (nodeId, selector) {\n    return useNodeProps(nodeId, function (node, ancestors) {\n        return node && !isRow(node) ? selector(node, ancestors) : selector(null, ancestors);\n    });\n};\n/**\n * better use useCellProps, unless you really need the full cell object\n * @param nodeId an id of a cell\n * @returns full Cell object\n */\nexport var useCell = function (nodeId) {\n    return useNodeProps(nodeId, function (node, ancestors) {\n        return !isRow(node) ? node : null;\n    });\n};\n/**\n * This is the same as @see useNodeProps, but only for rows.\n * @param nodeId an id of a row\n * @param selector receives the row or null (if no row with this id exists) object and returns T\n * @returns the selection T\n */\nexport var useRowProps = function (nodeId, selector) {\n    return useNodeProps(nodeId, function (node, ancestors) {\n        return isRow(node) ? selector(node, ancestors) : null;\n    });\n};\n/**\n *\n * @param nodeId id of a node\n * @returns the relative hover position over the given node, or null if this node is not hovered over\n */\nexport var useNodeHoverPosition = function (nodeId) {\n    return useSelector(function (state) {\n        var _a, _b;\n        return ((_a = state.reactPage.hover) === null || _a === void 0 ? void 0 : _a.nodeId) === nodeId\n            ? (_b = state.reactPage.hover) === null || _b === void 0 ? void 0 : _b.position\n            : null;\n    });\n};\n/**\n *\n * @param nodeId id of a node\n * @returns an array of ids that are ancestors of the given node\n */\nexport var useNodeAncestorIds = function (nodeId) {\n    return useNodeAncestorProps(nodeId, function (ancestors) {\n        return ancestors.map(function (a) { return a.id; });\n    });\n};\n/**\n *\n * @param nodeId the id of a row or cell\n * @returns the nearest ancestor cell of the cell or row that has a plugin\n */\nexport var useParentCellId = function (nodeId) {\n    return useNodeProps(nodeId, function (node, ancestors) {\n        var _a;\n        return node && ancestors\n            ? (_a = ancestors.find(function (node) { return !isRow(node) && node.plugin; })) === null || _a === void 0 ? void 0 : _a.id\n            : null;\n    });\n};\n/**\n * returns a cell as a HoverTarget that is suiteable to be passed to the drop-logic\n *\n * @param nodeId a nodeId\n * @returns a HoverTarget\n */\nexport var useNodeAsHoverTarget = function (nodeId) {\n    return useNodeProps(nodeId, function (node, ancestors) {\n        var _a;\n        return node\n            ? {\n                id: node.id,\n                // the last element is the root element, we can't currenly use that as hover target\n                ancestorIds: ancestors.slice(0, -1).map(function (a) { return a.id; }),\n                hasInlineNeighbour: !isRow(node)\n                    ? node.hasInlineNeighbour\n                    : undefined,\n                inline: !isRow(node) ? node.inline : null,\n                levels: getDropLevels(node, ancestors),\n                pluginId: !isRow(node) ? (_a = node.plugin) === null || _a === void 0 ? void 0 : _a.id : undefined,\n            }\n            : null;\n    });\n};\n/**\n *\n * @deprecated currently unused\n */\nexport var useCellBounds = function (nodeId) {\n    return useNodeProps(nodeId, function (node, ancestors) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        var parent = isRow(ancestors[0]) ? ancestors[0] : null;\n        if (!node) {\n            return null;\n        }\n        var myIndex = (_a = parent === null || parent === void 0 ? void 0 : parent.cells.findIndex(function (c) { return c.id === node.id; })) !== null && _a !== void 0 ? _a : -1;\n        var cell = !isRow(node) ? node : null;\n        if (!parent || !cell || myIndex < 0) {\n            return null;\n        }\n        if (cell.inline) {\n            return {\n                left: 0,\n                right: 0,\n            };\n        }\n        return {\n            left: myIndex > 0\n                ? ((_c = (_b = parent.cells[myIndex - 1]) === null || _b === void 0 ? void 0 : _b.size) !== null && _c !== void 0 ? _c : 0) + ((_d = cell.size) !== null && _d !== void 0 ? _d : 0) - 1\n                : 0,\n            right: myIndex === parent.cells.length - 1\n                ? 0\n                : ((_e = cell.size) !== null && _e !== void 0 ? _e : 0) - 1 + ((_g = (_f = parent.cells[myIndex + 1]) === null || _f === void 0 ? void 0 : _f.size) !== null && _g !== void 0 ? _g : 0),\n        };\n    });\n};\n/**\n *\n * @param nodeId a node id\n * @returns an array of nodeIds that are direct children of the given node\n */\nexport var useNodeChildrenIds = function (nodeId) {\n    return useNodeProps(nodeId, function (node) {\n        var _a, _b, _c, _d;\n        return isRow(node)\n            ? (_b = (_a = node === null || node === void 0 ? void 0 : node.cells) === null || _a === void 0 ? void 0 : _a.map(function (c) { return c.id; })) !== null && _b !== void 0 ? _b : []\n            : (_d = (_c = node === null || node === void 0 ? void 0 : node.rows) === null || _c === void 0 ? void 0 : _c.map(function (r) { return r.id; })) !== null && _d !== void 0 ? _d : [];\n    });\n};\n/**\n *\n * @param nodeId a node id\n * @returns true if node has children\n */\nexport var useNodeHasChildren = function (nodeId) {\n    return useNodeProps(nodeId, function (node) {\n        var _a, _b, _c, _d, _e;\n        return isRow(node)\n            ? (_b = ((_a = node.cells) === null || _a === void 0 ? void 0 : _a.length) > 0) !== null && _b !== void 0 ? _b : false\n            : (_e = ((_d = (_c = node === null || node === void 0 ? void 0 : node.rows) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0) !== null && _e !== void 0 ? _e : false;\n    });\n};\n/**\n *\n * @param nodeId an id of a cell\n * @returns true if this cell has a configured plugin. It does not check if this plugin exists (in @see Options)\n */\nexport var useCellHasPlugin = function (nodeId) {\n    return useCellProps(nodeId, function (c) { return Boolean(c === null || c === void 0 ? void 0 : c.plugin); });\n};\n/**\n * @param parentNodeId the parent node id, or null if its the root\n * @returns all configured CellPlugin that are allowed in the given parentCellId\n */\nexport var useAllCellPluginsForNode = function (parentNodeId) {\n    if (parentNodeId === void 0) { parentNodeId = null; }\n    var currentLang = useLang();\n    var ancestors = useNodeProps(parentNodeId, function (node, ancestors) {\n        return __spreadArray([node], __read(ancestors), false).reverse().map(function (a) {\n            var _a;\n            return {\n                pluginId: !a || isRow(a) ? null : (_a = a.plugin) === null || _a === void 0 ? void 0 : _a.id,\n                data: !a || isRow(a) ? null : getCellData(a, currentLang),\n            };\n        });\n    });\n    // pluginIdsOfAncestors is an array of ids, the last one is the\n    var rootCellPlugins = useRenderOption('cellPlugins');\n    return useMemo(function () {\n        return getAvailablePlugins(rootCellPlugins, ancestors);\n    }, [rootCellPlugins, ancestors]);\n};\nexport var useCellIsAllowedHere = function (nodeId) {\n    var availablePlugins = useAllCellPluginsForNode(nodeId);\n    return useCallback(function (item) {\n        var _a, _b, _c, _d;\n        if (!(item === null || item === void 0 ? void 0 : item.cell)) {\n            return false;\n        }\n        var itemPluginId = typeof ((_a = item.cell) === null || _a === void 0 ? void 0 : _a.plugin) === 'string'\n            ? item.cell.plugin\n            : (_c = (_b = item.cell) === null || _b === void 0 ? void 0 : _b.plugin) === null || _c === void 0 ? void 0 : _c.id;\n        var allowed = !((_d = item.cell) === null || _d === void 0 ? void 0 : _d.plugin) ||\n            availablePlugins.some(function (p) { return p.id === itemPluginId; });\n        return allowed;\n    }, [availablePlugins]);\n};\n/**\n * Use this function to get the plugin of a cell.\n * @param nodeId an id of a cell\n * @returns the plugin of the given cell\n *\n */\nexport var usePluginOfCell = function (nodeId) {\n    var _a, _b;\n    var _c = (_a = useCellProps(nodeId, function (c, ancestors) {\n        var _a, _b;\n        return ({\n            pluginId: (_a = c === null || c === void 0 ? void 0 : c.plugin) === null || _a === void 0 ? void 0 : _a.id,\n            parentNodeId: (_b = ancestors === null || ancestors === void 0 ? void 0 : ancestors[0]) === null || _b === void 0 ? void 0 : _b.id,\n        });\n    })) !== null && _a !== void 0 ? _a : {}, pluginId = _c.pluginId, parentNodeId = _c.parentNodeId;\n    var plugins = useAllCellPluginsForNode(parentNodeId);\n    return (_b = plugins.find(function (p) { return p.id === pluginId; })) !== null && _b !== void 0 ? _b : null;\n};\n/**\n *\n * @param nodeId a cell id\n * @returns the raw localized data of the cell\n */\nexport var useCellDataI18nRaw = function (nodeId) {\n    return useCellProps(nodeId, function (c) { return c === null || c === void 0 ? void 0 : c.dataI18n; });\n};\n/**\n *\n * @param nodeId a cell id\n * @param lang a language key\n * @returns the data object in the given language of the given cell\n */\nexport var useCellData = function (nodeId, lang) {\n    var currentLang = useLang();\n    var theLang = lang !== null && lang !== void 0 ? lang : currentLang;\n    return useCellProps(nodeId, function (c) { var _a; return (_a = getCellData(c, theLang)) !== null && _a !== void 0 ? _a : {}; });\n};\n/**\n *returns style and classname of a cell's inner div\n * @param nodeId a cell id\n * @param lang a language key (optionally)\n * @returns the data object in the given language of the given cell\n */\nexport var useCellInnerDivStylingProps = function (nodeId, lang) {\n    var _a;\n    var plugin = usePluginOfCell(nodeId);\n    var currentLang = useLang();\n    var theLang = lang !== null && lang !== void 0 ? lang : currentLang;\n    return ((_a = useCellProps(nodeId, function (c) {\n        var data = getCellData(c, theLang);\n        return getCellInnerDivStylingProps(c, plugin, data);\n    })) !== null && _a !== void 0 ? _a : {});\n};\n/**\n *\n * @returns [data, onChangeData] tuple. onChangeData is debouncing the propagation.\n * Data is always partially updated.\n *\n * @param nodeId the id of the cell\n */\nexport var useDebouncedCellData = function (nodeId) {\n    var cellData = useCellData(nodeId);\n    var _a = __read(useState({}), 2), currentPartialData = _a[0], setCurrentPartialData = _a[1];\n    var currentPartialDataRef = useRef();\n    var currentLang = useLang();\n    var currentData = useMemo(function () {\n        var _a;\n        return __assign(__assign({}, (cellData !== null && cellData !== void 0 ? cellData : {})), ((_a = currentPartialData[currentLang]) !== null && _a !== void 0 ? _a : {}));\n    }, [currentLang, currentPartialData, cellData]);\n    var updateHandles = useRef({});\n    var updateCellDataImmediatly = useUpdateCellData(nodeId);\n    var onChange = useCallback(function (partialData, options) {\n        var _a;\n        var _b, _c, _d, _e, _f, _g;\n        var lang = (_b = options === null || options === void 0 ? void 0 : options.lang) !== null && _b !== void 0 ? _b : currentLang;\n        // if one debounced callback exists for the same language, cancel it\n        if ((_d = (_c = updateHandles.current) === null || _c === void 0 ? void 0 : _c[lang]) === null || _d === void 0 ? void 0 : _d.timeoutHandle)\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            clearTimeout(updateHandles.current[lang].timeoutHandle);\n        if (!updateHandles.current[lang]) {\n            updateHandles.current[lang] = {};\n        }\n        currentPartialDataRef.current = __assign(__assign({}, ((_e = currentPartialDataRef.current) !== null && _e !== void 0 ? _e : {})), (_a = {}, _a[lang] = __assign(__assign(__assign({}, (cellData !== null && cellData !== void 0 ? cellData : {})), ((_g = (_f = currentPartialDataRef.current) === null || _f === void 0 ? void 0 : _f[lang]) !== null && _g !== void 0 ? _g : {})), (partialData !== null && partialData !== void 0 ? partialData : {})), _a));\n        setCurrentPartialData(currentPartialDataRef.current);\n        updateHandles.current[lang].timeoutHandle = setTimeout(function () {\n            var _a;\n            var _b, _c, _d, _e;\n            updateCellDataImmediatly((_c = (_b = currentPartialDataRef.current) === null || _b === void 0 ? void 0 : _b[lang]) !== null && _c !== void 0 ? _c : {}, __assign(__assign({}, (options !== null && options !== void 0 ? options : {})), { lang: lang }));\n            setCurrentPartialData((_a = {}, _a[lang] = {}, _a));\n            if ((_d = currentPartialDataRef.current) === null || _d === void 0 ? void 0 : _d[lang])\n                (_e = currentPartialDataRef.current) === null || _e === void 0 ? true : delete _e[lang];\n            delete updateHandles.current[lang];\n        }, 200);\n    }, [updateCellDataImmediatly, currentLang, cellData]);\n    return [currentData, onChange];\n};\n//# sourceMappingURL=node.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useCallback } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { getCommonAncestorTree } from '../../utils/ancestorTree';\nimport { blurAllCells } from '../../actions/cell';\nimport { blurCell, focusCell, removeCells, resizeCell, updateCellData, updateCellIsDraft, } from '../../actions/cell/core';\nimport { duplicateCell, duplicateNode, insertCellAtTheEnd, insertCellNewAsNewRow, } from '../../actions/cell/insert';\nimport { setDisplayReferenceNodeId } from '../../actions/display';\nimport { setLang } from '../../actions/setting';\nimport { useDispatch } from '../../reduxConnect';\nimport { isRow } from '../../types/node';\nimport { useAllCellPluginsForNode } from './node';\nimport { useEditorStore, useLang } from './options';\nimport { cloneWithNewIds } from '../../../core/utils/cloneWithNewIds';\nimport { useDisplayModeReferenceNodeId } from './displayMode';\n/**\n * @param id id of a node\n * @returns function, that sets a cell in draft mode (will be invisible in readonly / preview)\n */\nexport var useSetDraft = function (id) {\n    var dispatch = useDispatch();\n    return useCallback(function (isDraft, lang) {\n        return dispatch(updateCellIsDraft(id, isDraft, lang));\n    }, [dispatch, id]);\n};\n/**\n * @returns function to resize a cell\n */\nexport var useResizeCellById = function () {\n    var dispatch = useDispatch();\n    return useCallback(function (nodeId, size) { return dispatch(resizeCell(nodeId)(size)); }, [dispatch]);\n};\n/**\n *\n * @param id a cell id\n * @returns a function to resize the given cell\n */\nexport var useResizeCell = function (id) {\n    var resizeById = useResizeCellById();\n    return useCallback(function (size) { return resizeById(id, size); }, [resizeById, id]);\n};\n/**\n *\n * @returns a function to change the current language\n */\nexport var useSetLang = function () {\n    var dispatch = useDispatch();\n    return useCallback(function (lang) { return dispatch(setLang(lang)); }, [dispatch]);\n};\n/**\n *\n * @param id a cell id\n * @returns function to update the data of the given cell. Sets the data in the current language, unless options.lang is set\n */\nexport var useUpdateCellData = function (id) {\n    var dispatch = useDispatch();\n    var currentLang = useLang();\n    return useCallback(function (data, options) {\n        if (options === void 0) { options = {}; }\n        dispatch(updateCellData(id)(data, __assign({ notUndoable: false, lang: currentLang }, options)));\n    }, [dispatch, id, currentLang]);\n};\n/**\n * @returns a function to remove a cell by id\n */\nexport var useRemoveCellById = function () {\n    var dispatch = useDispatch();\n    return useCallback(function (id) { return dispatch(removeCells(id ? [id] : [])); }, [dispatch]);\n};\n/**\n * @param id a cell id\n * @returns a function to remove the given cell\n */\nexport var useRemoveCell = function (id) {\n    var removeById = useRemoveCellById();\n    return useCallback(function () { return removeById(id); }, [removeById, id]);\n};\n/**\n *\n * @returns a function to remove muliple nodeids\n */\nexport var useRemoveMultipleNodeIds = function () {\n    var dispatch = useDispatch();\n    return useCallback(function (nodeIds) {\n        dispatch(removeCells(nodeIds));\n    }, [dispatch]);\n};\n/**\n * @returns a function that duplicates a cell\n */\nexport var useDuplicateCellById = function () {\n    var dispatch = useDispatch();\n    var editor = useEditorStore();\n    return useCallback(function (id) {\n        var node = editor && editor.getNode(id);\n        if (node)\n            dispatch(duplicateCell(node));\n    }, [editor, dispatch]);\n};\nexport var useInsertAfter = function () {\n    var dispatch = useDispatch();\n    var insertNew = useInsertNew();\n    return useCallback(function (node, insertAfterNodeId) {\n        if (insertAfterNodeId) {\n            dispatch(duplicateNode(node, {\n                insertAfterNodeId: insertAfterNodeId,\n            }));\n        }\n        else {\n            // insert at the end\n            insertNew(cloneWithNewIds(node));\n        }\n    }, [dispatch, insertNew]);\n};\n/**\n * @returns a function that duplicates multiple cell\n */\nexport var useDuplicateMultipleCells = function () {\n    var editor = useEditorStore();\n    var insertAfter = useInsertAfter();\n    return useCallback(function (cellIds) {\n        var _a, _b, _c, _d;\n        var node = editor && getCommonAncestorTree(editor, cellIds);\n        if (!node) {\n            return;\n        }\n        var insertAfterNodeId = isRow(node)\n            ? node.id\n            : (_d = (_a = node === null || node === void 0 ? void 0 : node.rows) === null || _a === void 0 ? void 0 : _a[(_c = (_b = node === null || node === void 0 ? void 0 : node.rows) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0 - 1]) === null || _d === void 0 ? void 0 : _d.id;\n        insertAfter(node, insertAfterNodeId);\n    }, [editor, insertAfter]);\n};\n/**\n * @param a cell id\n * @returns a function that duplicates the given cell\n */\nexport var useDuplicateCell = function (id) {\n    var duplicate = useDuplicateCellById();\n    return useCallback(function () { return duplicate(id); }, [duplicate, id]);\n};\n/**\n * experimental\n * @returns function to set the reference node id. used internally\n */\nexport var useSetDisplayReferenceNodeId = function () {\n    var dispatch = useDispatch();\n    var referenceId = useDisplayModeReferenceNodeId();\n    return useCallback(function (nodeId) {\n        if (nodeId !== referenceId)\n            dispatch(setDisplayReferenceNodeId(nodeId));\n    }, [dispatch, referenceId]);\n};\n/**\n * @returns a function to focus a cell by id\n */\nexport var useFocusCellById = function () {\n    var dispatch = useDispatch();\n    var editor = useEditorStore();\n    return useCallback(function (id, scrollToCell, mode) {\n        var _a, _b, _c;\n        if (!editor) {\n            return;\n        }\n        var parentCellId = (_c = (_b = (_a = editor\n            .getNodeWithAncestors(id)) === null || _a === void 0 ? void 0 : _a.ancestors) === null || _b === void 0 ? void 0 : _b.find(function (node) { return !isRow(node); })) === null || _c === void 0 ? void 0 : _c.id;\n        dispatch(setDisplayReferenceNodeId(parentCellId));\n        dispatch(focusCell(id, scrollToCell, mode));\n    }, [dispatch, editor]);\n};\n/**\n * @returns a function to focus a cell by id\n */\nexport var useFocusCell = function (id) {\n    var focusCellById = useFocusCellById();\n    return useCallback(function (scrollToCell, mode) {\n        if (id) {\n            focusCellById(id, scrollToCell, mode);\n        }\n    }, [focusCellById, id]);\n};\n/**\n * @returns function to blur a cell by id\n */\nexport var useBlurCell = function () {\n    var dispatch = useDispatch();\n    return useCallback(function (id) {\n        dispatch(blurCell(id));\n    }, [dispatch]);\n};\n/**\n * @returns function to blur all cells\n */\nexport var useBlurAllCells = function () {\n    var dispatch = useDispatch();\n    return useCallback(function () {\n        dispatch(blurAllCells());\n    }, [dispatch]);\n};\n/**\n * @returns function to insert a cell at the end of the document or the end of the parent cell\n *\n * if the id already exists, it will move that cell\n */\nexport var useInsertNew = function (parentCellId) {\n    var dispatch = useDispatch();\n    var cellPlugins = useAllCellPluginsForNode(parentCellId);\n    var editor = useEditorStore();\n    var lang = useLang();\n    return useCallback(function (partialCell) {\n        var action = parentCellId ? insertCellNewAsNewRow : insertCellAtTheEnd;\n        dispatch(action({\n            cellPlugins: cellPlugins,\n            lang: lang,\n        })(partialCell, { id: parentCellId }, { focusAfter: true }));\n    }, [dispatch, editor, cellPlugins, parentCellId]);\n};\n/**\n * used for the trash target\n */\nexport var useTrashDrop = function () {\n    var removeCell = useRemoveCellById();\n    return useDrop({\n        accept: 'cell',\n        collect: function (monitor) { return ({\n            isHovering: monitor.isOver({ shallow: true }),\n        }); },\n        drop: function (item, monitor) {\n            if (item.cell) {\n                removeCell(item.cell.id);\n            }\n        },\n    });\n};\n//# sourceMappingURL=nodeActions.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { mapNode } from './mapNode';\n/**\n * get a node with children that only contains certain cells\n * this is usefull to duplicate or clone multiple cells\n * @param editor: the editor store\n * @param cellIds\n */\nexport var getCommonAncestorTree = function (editor, cellIds) {\n    var nodesWithAncestors = cellIds.map(function (nodeId) {\n        var _a;\n        var _b = (_a = editor.getNodeWithAncestors(nodeId)) !== null && _a !== void 0 ? _a : {\n            ancestors: [],\n        }, node = _b.node, ancestors = _b.ancestors;\n        return { node: node, ancestors: __spreadArray([], __read(ancestors), false).reverse() };\n    });\n    // find common ancestors\n    var nearestCommonAncestor = null;\n    var depth = 0;\n    var search = true;\n    while (search) {\n        // check if every node has the same ancestor\n        if (nodesWithAncestors.every(function (n) {\n            var _a, _b;\n            return n.ancestors[depth] &&\n                ((_a = n.ancestors[depth]) === null || _a === void 0 ? void 0 : _a.id) === ((_b = nodesWithAncestors[0].ancestors[depth]) === null || _b === void 0 ? void 0 : _b.id);\n        })) {\n            nearestCommonAncestor = nodesWithAncestors[0].ancestors[depth];\n            depth++;\n        }\n        else {\n            search = false;\n        }\n    }\n    // remove nodes that we don't want to duplicate unless they have children\n    var cleaned = mapNode(nearestCommonAncestor, {\n        skipMapCell: function (c) {\n            return cellIds.includes(c.id);\n        },\n        // remove cells without rows\n        mapCell: function (c) {\n            var _a;\n            if ((_a = c.rows) === null || _a === void 0 ? void 0 : _a.length) {\n                return c;\n            }\n            else {\n                return null;\n            }\n        },\n        // remove empty cells from rows and remove row completly if its empty\n        mapRowDown: function (r) {\n            var _a;\n            if (!r)\n                return null;\n            var row = __assign(__assign({}, r), { cells: (_a = r.cells.filter(Boolean)) !== null && _a !== void 0 ? _a : [] });\n            if (row.cells.length === 0) {\n                return null;\n            }\n            return row;\n        },\n        // remove empty rows of cells\n        mapCellDown: function (c) {\n            var _a, _b, _c;\n            if (!c)\n                return null;\n            var cell = __assign(__assign({}, c), { rows: (_b = (_a = c === null || c === void 0 ? void 0 : c.rows) === null || _a === void 0 ? void 0 : _a.filter(Boolean)) !== null && _b !== void 0 ? _b : [] });\n            if (((_c = cell.rows) === null || _c === void 0 ? void 0 : _c.length) > 0 || cellIds.includes(cell.id)) {\n                return cell;\n            }\n            else {\n                return null;\n            }\n        },\n    });\n    return cleaned;\n};\n//# sourceMappingURL=ancestorTree.js.map"],"names":["isPreviewMode","_a","mode","reactPage","display","OA","isLayoutMode","pe","isEditMode","kH","isInsertMode","F8","isResizeMode","i1","useIsEditMode","reduxConnect","v9","useIsInsertMode","useIsLayoutMode","useIsPreviewMode","useIsResizeMode","useDisplayMode","state","useDisplayModeReferenceNodeId","_b","referenceNodeId","useSetMode","dispatch","I0","react","useCallback","PM","useSetResizeMode","setMode","useSetEditMode","useSetLayoutMode","useSetInsertMode","useSetPreviewMode","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","getMyPositionInParent","node","parent","siblings","types_node","j","cells","rows","findIndex","c","id","length","left","ancestors","greatParents","slice","right","numberOfSiblings","above","below","__assign","Object","assign","t","s","arguments","p","prototype","hasOwnProperty","apply","node_read","__spreadArray","to","from","pack","l","Array","concat","useNodeProps","nodeId","selector","result","editable","$5","deepEquals","Z","useCellProps","useCell","useNodeHoverPosition","hover","position","useParentCellId","find","plugin","useNodeAsHoverTarget","ancestorIds","map","a","hasInlineNeighbour","undefined","inline","levels","pluginId","useNodeChildrenIds","_c","_d","useNodeHasChildren","_e","useCellHasPlugin","Boolean","useAllCellPluginsForNode","parentNodeId","currentLang","options","Jr","reverse","data","getCellData","k","rootCellPlugins","renderOptions","ZG","useMemo","getAvailablePlugins","q","useCellIsAllowedHere","availablePlugins","item","cell","itemPluginId","some","usePluginOfCell","plugins","useCellDataI18nRaw","dataI18n","useCellData","lang","theLang","useCellInnerDivStylingProps","getCellStylingProps","c_","useDebouncedCellData","cellData","useState","currentPartialData","setCurrentPartialData","currentPartialDataRef","useRef","currentData","updateHandles","updateCellDataImmediatly","nodeActions","YN","partialData","_f","_g","current","timeoutHandle","clearTimeout","setTimeout","useSetDraft","_reduxConnect__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0__","isDraft","_actions_cell_core__WEBPACK_IMPORTED_MODULE_2__","T4","useResizeCellById","size","useResizeCell","resizeById","useSetLang","_actions_setting__WEBPACK_IMPORTED_MODULE_3__","W","useUpdateCellData","_options__WEBPACK_IMPORTED_MODULE_4__","a7","notUndoable","useRemoveCellById","jr","useRemoveCell","removeById","useRemoveMultipleNodeIds","nodeIds","useDuplicateCellById","editor","Eh","getNode","_actions_cell_insert__WEBPACK_IMPORTED_MODULE_5__","AQ","useInsertAfter","insertNew","useInsertNew","insertAfterNodeId","NO","_core_utils_cloneWithNewIds__WEBPACK_IMPORTED_MODULE_6__","Q","useDuplicateMultipleCells","insertAfter","cellIds","_utils_ancestorTree__WEBPACK_IMPORTED_MODULE_7__","_types_node__WEBPACK_IMPORTED_MODULE_8__","useDuplicateCell","duplicate","useSetDisplayReferenceNodeId","referenceId","_displayMode__WEBPACK_IMPORTED_MODULE_9__","iu","_actions_display__WEBPACK_IMPORTED_MODULE_10__","pp","useFocusCellById","scrollToCell","parentCellId","getNodeWithAncestors","Uv","useFocusCell","focusCellById","useBlurAllCells","L9","cellPlugins","_node__WEBPACK_IMPORTED_MODULE_11__","Ks","partialCell","action","Kf","ol","focusAfter","useTrashDrop","removeCell","react_dnd__WEBPACK_IMPORTED_MODULE_12__","L","accept","collect","monitor","isHovering","isOver","shallow","drop","getCommonAncestorTree","nodesWithAncestors","nearestCommonAncestor","depth","search","every","_mapNode__WEBPACK_IMPORTED_MODULE_0__","F","skipMapCell","includes","mapCell","mapRowDown","row","filter","mapCellDown"],"sourceRoot":""}